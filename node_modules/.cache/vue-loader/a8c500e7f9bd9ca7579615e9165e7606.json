{"remainingRequest":"C:\\Users\\claudia.ligidakis\\Desktop\\for-claudia\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\claudia.ligidakis\\Desktop\\for-claudia\\node_modules\\vue-keyboard\\src\\keyboard.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\claudia.ligidakis\\Desktop\\for-claudia\\node_modules\\vue-keyboard\\src\\keyboard.vue","mtime":1496393776000},{"path":"C:\\Users\\claudia.ligidakis\\Desktop\\for-claudia\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\claudia.ligidakis\\Desktop\\for-claudia\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\claudia.ligidakis\\Desktop\\for-claudia\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\claudia.ligidakis\\Desktop\\for-claudia\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\claudia.ligidakis\\Desktop\\for-claudia\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.vue-keyboard-row {\n\tpadding: 2px 0;\n\ttext-align: center;\n}\n\n.vue-keyboard-key {\n\tborder: none;\n\toutline: none;\n\tpadding: 8px 10px;\n\tmin-width: 40px;\n\tmargin: 0 2px;\n\tbackground: #EEE;\n\tcolor: #666;\n\tcursor: pointer;\n\tfont-family: inherit;\n\tfont-size: inherit;\n\tborder-radius: 2px;\n}\n\n.vue-keyboard-key:hover {\n\tbackground: #E0E0E0;\n}\n\n.vue-keyboard-key:active {\n\tbackground: #777;\n\tcolor: #FFF;\n\tbox-shadow: inset 0 1px 4px rgba(#000, 0.1);\n}\n\n.vue-keyboard-key[data-action=\"space\"] {\n\tmin-width: 160px;\n}\n",{"version":3,"sources":["keyboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmNA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"keyboard.vue","sourceRoot":"node_modules/vue-keyboard/src","sourcesContent":["<script>\r\n\tconst Tokens = {\r\n\t\t// Sequences that no-one will ever put in their keyboards.\r\n\t\tPIPE: '7440011c983cf39ae730b1f831e2922ac5a76910',\r\n\t\tOPEN_BRACE: 'f630c4abcae620278f82e142a526ef325c2a773a',\r\n\t\tCLOSE_BRACE: 'ad982c66898e02a5dab419ea7568421b03f68ee2'\r\n\t};\r\n\r\n\texport default {\r\n\t\tname: 'keyboard',\r\n\t\t\r\n\t\tprops: {\r\n\t\t\tvalue: {\r\n\t\t\t\ttype: String,\r\n\t\t\t\tdefault: ''\r\n\t\t\t},\r\n\t\t\tlayouts: {\r\n\t\t\t\ttype: [String, Array],\r\n\t\t\t\trequired: true\r\n\t\t\t},\r\n\t\t\tmaxlength: {\r\n\t\t\t\ttype: Number,\r\n\t\t\t\tdefault: 0,\r\n\t\t\t\tvalidator: value => value >= 0\r\n\t\t\t},\r\n\t\t\tpattern: {\r\n\t\t\t\ttype: String,\r\n\t\t\t\tdefault: null\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\tlayout: 0\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\tcomputed: {\r\n\t\t\t/**\r\n\t\t\t * Whether or not the keyboard input has hit its maximum length.\r\n\t\t\t * @returns {Boolean}\r\n\t\t\t */\r\n\t\t\tfull() {\r\n\t\t\t\treturn this.maxlength > 0 && this.value.length >= this.maxlength;\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Whether or not the keyboard input is empty.\r\n\t\t\t * @return {Boolean}\r\n\t\t\t */\r\n\t\t\tempty() {\r\n\t\t\t\treturn this.value.length === 0;\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns the lines that make up a layout.\r\n\t\t\t * @return {Array}\r\n\t\t\t */\r\n\t\t\tlines() {\r\n\t\t\t\tlet layout = (Array.isArray(this.layouts) ? this.layouts : [this.layouts])[this.layout];\r\n\r\n\t\t\t\treturn layout.replace('||', Tokens.PIPE)\r\n\t\t\t\t\t.replace('{{', Tokens.OPEN_BRACE)\r\n\t\t\t\t\t.replace('}}', Tokens.CLOSE_BRACE)\r\n\t\t\t\t\t.split('|');\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns an array of buttons to render in the component.\r\n\t\t\t * @returns {Array[]}\r\n\t\t\t */\r\n\t\t\tbuttons() {\r\n\t\t\t\treturn this.lines.map(line => {\r\n\t\t\t\t\t// TODO: Could potentially rely on Object.values() here instead of being explicit.\r\n\t\t\t\t\tlet stream = line.match(new RegExp(`(${Tokens.OPEN_BRACE}|${Tokens.CLOSE_BRACE}|${Tokens.PIPE}|.)`, 'g'));\r\n\r\n\t\t\t\t\tlet buttons = [];\r\n\t\t\t\t\tlet token = null;\r\n\r\n\t\t\t\t\tstream.forEach(char => {\r\n\t\t\t\t\t\tif (char === '{') {\r\n\t\t\t\t\t\t\ttoken = '';\r\n\t\t\t\t\t\t} else if (char === '}') {\r\n\t\t\t\t\t\t\tlet command = token.split(':');\r\n\t\t\t\t\t\t\tlet text = command.length > 1 ? command[0] : '';\r\n\t\t\t\t\t\t\tlet action = command.length > 1 ? command[1] : command[0];\r\n\t\t\t\t\t\t\tlet args = command.length > 2 ? command[2] : null;\r\n\t\t\t\t\t\t\tlet method = null;\r\n\r\n\t\t\t\t\t\t\tif (['append', 'backspace', 'space', 'clear', 'goto'].indexOf(action) >= 0) method = this[action].bind(this, args);\r\n\t\t\t\t\t\t\telse method = this.$emit.bind(this, action, this);\r\n\r\n\t\t\t\t\t\t\tbuttons.push({\r\n\t\t\t\t\t\t\t\ttype: 'action',\r\n\t\t\t\t\t\t\t\taction: { name: action.replace(/\\s+/g, '-').toLowerCase(), callable: method },\r\n\t\t\t\t\t\t\t\tvalue: text,\r\n\t\t\t\t\t\t\t\targs\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\ttoken = null;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (token !== null) {\r\n\t\t\t\t\t\t\t\ttoken += char;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tif (char === Tokens.PIPE) char = '|';\r\n\t\t\t\t\t\t\t\tif (char === Tokens.OPEN_BRACE) char = '{';\r\n\t\t\t\t\t\t\t\tif (char === Tokens.CLOSE_BRACE) char = '}';\r\n\r\n\t\t\t\t\t\t\t\tbuttons.push({\r\n\t\t\t\t\t\t\t\t\ttype: 'char',\r\n\t\t\t\t\t\t\t\t\taction: { name: null, callable: this.append.bind(this, char) },\r\n\t\t\t\t\t\t\t\t\tvalue: char,\r\n\t\t\t\t\t\t\t\t\targs: null\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\treturn buttons;\r\n\t\t\t\t});\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Whether or not the current value matches the regex provided to pattern. Always\r\n\t\t\t * returns true if no pattern was provided.\r\n\t\t\t * @returns {Boolean}\r\n\t\t\t */\r\n\t\t\tvalid() {\r\n\t\t\t\treturn !this.pattern || this.value.match(new RegExp(this.pattern));\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tmethods: {\r\n\t\t\t/**\r\n\t\t\t * Mutates the keyboard value to a new value.\r\n\t\t\t * @param {String} value The new value.\r\n\t\t\t */\r\n\t\t\tmutate(value) {\r\n\t\t\t\tif (this.maxlength > 0) {\r\n\t\t\t\t\tvalue = value.slice(0, this.maxlength);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.$emit('input', value);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Appends a new value to the end of the current keyboard value.\r\n\t\t\t * @param {String} char The character(s) to append.\r\n\t\t\t */\r\n\t\t\tappend(char) {\r\n\t\t\t\tthis.mutate(this.value + char);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Remove the last character from the current keyboard value.\r\n\t\t\t */\r\n\t\t\tbackspace() {\r\n\t\t\t\tthis.mutate(this.value.slice(0, this.value.length - 1));\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Add one whitespace character to the current keyboard value.\r\n\t\t\t */\r\n\t\t\tspace() {\r\n\t\t\t\tthis.append(' ');\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Go to a new layout.\r\n\t\t\t * @param {Number} The layout index.\r\n\t\t\t */\r\n\t\t\tgoto(layout) {\r\n\t\t\t\tif (Array.isArray(this.layouts)) {\r\n\t\t\t\t\tif (layout >= 0 && layout < this.layouts.length) {\r\n\t\t\t\t\t\tthis.layout = layout;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new Error('The requested layout does not exist.');\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error('A single non-array layout was provided.');\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Clear the entire keyboard value.\r\n\t\t\t */\r\n\t\t\tclear() {\r\n\t\t\t\tthis.mutate('');\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<template>\r\n\t<aside class=\"vue-keyboard\" role=\"application\" :class=\"{ full: full, empty: empty, valid: valid, invalid: !valid }\" :data-value=\"value\" :data-layout=\"layout\">\r\n\t\t<div role=\"row\" class=\"vue-keyboard-row\" v-for=\"row in buttons\" :data-keys=\"row.length\">\r\n\t\t\t<button\r\n\t\t\t\tv-for=\"btn in row\"\r\n\t\t\t\tclass=\"vue-keyboard-key\"\r\n\t\t\t\trole=\"button\"\r\n\t\t\t\t:class=\"btn.type\"\r\n\t\t\t\t:data-args=\"btn.args\"\r\n\t\t\t\t:data-text=\"btn.value\"\r\n\t\t\t\t:data-action=\"btn.action.name\"\r\n\t\t\t\t@click.prevent=\"btn.action.callable\"\r\n\t\t\t>{{ btn.value }}</button>\r\n\t\t</div>\r\n\t</aside>\r\n</template>\r\n\r\n<style>\r\n\t.vue-keyboard-row {\r\n\t\tpadding: 2px 0;\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t.vue-keyboard-key {\r\n\t\tborder: none;\r\n\t\toutline: none;\r\n\t\tpadding: 8px 10px;\r\n\t\tmin-width: 40px;\r\n\t\tmargin: 0 2px;\r\n\t\tbackground: #EEE;\r\n\t\tcolor: #666;\r\n\t\tcursor: pointer;\r\n\t\tfont-family: inherit;\r\n\t\tfont-size: inherit;\r\n\t\tborder-radius: 2px;\r\n\t}\r\n\r\n\t.vue-keyboard-key:hover {\r\n\t\tbackground: #E0E0E0;\r\n\t}\r\n\r\n\t.vue-keyboard-key:active {\r\n\t\tbackground: #777;\r\n\t\tcolor: #FFF;\r\n\t\tbox-shadow: inset 0 1px 4px rgba(#000, 0.1);\r\n\t}\r\n\r\n\t.vue-keyboard-key[data-action=\"space\"] {\r\n\t\tmin-width: 160px;\r\n\t}\r\n</style>"]}]}